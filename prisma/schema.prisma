generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(uuid())
  auth0Id   String?   @unique
  email     String
  password  String
  firstName String?
  lastName  String?
  mobile    String?
  image     String?
  type      UserType?
  admin     Admin?
  customer  Customer?
  provider  Provider?
}

model Provider {
  id                String               @id @default(uuid())
  userId            String               @unique
  isIndividual      String?
  isRegistredOffice String?
  zip               String?
  description       String?
  addresses         Address[]            @relation("ProviderAddresses")
  user              User                 @relation(fields: [userId], references: [id])
  providerRatings   Rating?
  Request           Request[]
  services          ServiceProviderMap[]
}

model Rating {
  provider_id        String   @id
  avg_punc_rating    Float
  avg_prof_rating    Float
  avg_eti_rating     Float
  avg_comm_rating    Float
  avg_price_rating   Float
  avg_overall_rating Float
  last_updated_on    DateTime
  provider           Provider @relation(fields: [provider_id], references: [id])
}

model ReviewLog {
  id                     Int         @id @default(autoincrement())
  service_appointment_id Int         @unique
  punctuality_rating     Int
  proficiency_rating     Int
  etiquettes_rating      Int
  communication_rating   Int
  price_rating           Int
  overall_rating         Int
  review                 String?
  review_date            DateTime
  service_appointment    Appointment @relation(fields: [service_appointment_id], references: [id], onDelete: Cascade)
}

model Category {
  id            Int       @id @default(autoincrement())
  category_name String
  image         String
  services      Service[]
}

model Service {
  id                  Int                  @id @default(autoincrement())
  service_name        String
  service_category_id Int
  Request             Request[]
  service_category    Category             @relation(fields: [service_category_id], references: [id])
  service_providers   ServiceProviderMap[]
}

model ServiceProviderMap {
  id                     Int            @id @default(autoincrement())
  service_id             Int
  provider_id            String
  billing_rate_per_hour  Float
  experience_in_months   Int
  service_offering_desc  String?
  service_delivery_offer DeliveryOffer?
  provider               Provider       @relation(fields: [provider_id], references: [id])
  service                Service        @relation(fields: [service_id], references: [id])
}

model Customer {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  userId    String    @unique
  addresses Address[]
  user      User      @relation(fields: [userId], references: [id])
  requests  Request[]
}

model Address {
  id         Int       @id @default(autoincrement())
  street     String
  city       String
  wilaya     String
  zip        String
  customerId String?
  providerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  provider   Provider? @relation("ProviderAddresses", fields: [providerId], references: [id])
  requests   Request[]
}

model DeliveryOffer {
  id                      Int                @id @default(autoincrement())
  service_request_id      Int
  service_provider_map_id Int                @unique
  discount_in_percentage  Float?
  is_offer_accepted       Boolean?
  service_appointment     Appointment[]
  service_provider_map    ServiceProviderMap @relation(fields: [service_provider_map_id], references: [id])
  service_request         Request            @relation(fields: [service_request_id], references: [id])
}

model Request {
  id                    Int             @id @default(autoincrement())
  customer_id           String
  service_id            Int
  requirement_desc      String?
  expected_start_time   DateTime
  addressId             Int?
  custom_address_city   String?
  custom_address_street String?
  custom_address_wilaya String?
  custom_address_zip    String?
  providerId            String?
  state                 RequestState // Add state field
  DeliveryOffer         DeliveryOffer[]
  Address               Address?        @relation(fields: [addressId], references: [id])
  customer              Customer        @relation(fields: [customer_id], references: [id])
  provider              Provider?       @relation(fields: [providerId], references: [id])
  service               Service         @relation(fields: [service_id], references: [id])
}

model Appointment {
  id                        Int           @id @default(autoincrement())
  service_delivery_offer_id Int
  service_deliver_on        DateTime
  service_start_time        DateTime
  service_end_time          DateTime?
  service_delivery_offer    DeliveryOffer @relation(fields: [service_delivery_offer_id], references: [id])
  provider_review_log       ReviewLog?
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

enum UserType {
  Admin
  Provider
  Customer
}

enum RequestState {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELED
  // Add more states as needed
}
