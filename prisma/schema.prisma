// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Part 1: Provider Area
model provider {
  id                   Int     @id @default(autoincrement())
  auth0Id              String
  first_name           String
  last_name            String
  email                String
  mobile_number        String
  is_individual        Boolean
  is_registered_office Boolean
  office_address       String?
  zip                  String
  description          String?

  provider_rating      provider_rating[]
  service_provider_map service_provider_map[]
}

model provider_rating {
  provider_id        Int      @id
  avg_punc_rating    Float
  avg_prof_rating    Float
  avg_eti_rating     Float
  avg_comm_rating    Float
  avg_price_rating   Float
  avg_overall_rating Float
  last_updated_on    DateTime

  provider provider @relation(fields: [provider_id], references: [id])
}

model provider_review_log {
  id                     Int                  @id @default(autoincrement())
  service_appointment    service_appointment? @relation(fields: [service_appointment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  service_appointment_id Int                  @unique
  punctuality_rating     Int
  proficiency_rating     Int
  etiquettes_rating      Int
  communication_rating   Int
  price_rating           Int
  overall_rating         Int
  review                 String?
  review_date            DateTime
}

// Part 2: Services Area
model service_category {
  id            Int       @id @default(autoincrement())
  category_name String
  image         String
  services      service[]
}

model service {
  id                  Int                    @id @default(autoincrement())
  service_name        String
  service_category_id Int // Foreign key referencing service_category.id
  service_category    service_category       @relation(fields: [service_category_id], references: [id])
  service_providers   service_provider_map[]
}

model service_provider_map {
  id                    Int     @id @default(autoincrement())
  service_id            Int
  provider_id           Int
  billing_rate_per_hour Float
  experience_in_months  Int
  service_offering_desc String?

  service                service                 @relation(fields: [service_id], references: [id])
  provider               provider                @relation(fields: [provider_id], references: [id])
  service_delivery_offer service_delivery_offer? // One-to-one relationship with service_delivery_offer
}

// Part 3: Customers Area
model customer {
  id              Int               @id @default(autoincrement())
  auth0Id         String
  first_name      String
  second_name     String?
  last_name       String
  email           String
  mobile_number   String
  addresses       address[]
  service_request service_request[]
}

model address {
  id              Int               @id @default(autoincrement())
  customer_id     Int // Foreign key referencing customer.id
  customer        customer          @relation(fields: [customer_id], references: [id])
  street          String
  city            String
  state           String
  zip             String
  service_request service_request[]
}

// Part 4: Service Delivery
model service_delivery_offer {
  id                      Int      @id @default(autoincrement())
  service_request_id      Int
  service_provider_map_id Int      @unique // Add @unique attribute here
  discount_in_percentage  Float?
  is_offer_accepted       Boolean?

  service_request      service_request       @relation(fields: [service_request_id], references: [id])
  service_provider_map service_provider_map  @relation(fields: [service_provider_map_id], references: [id])
  service_appointment  service_appointment[] // One-to-many relationship with service_appointment
}

model service_request {
  id                     Int                      @id @default(autoincrement())
  customer_id            Int
  address_id             Int
  service_id             Int
  requirement_desc       String?
  expected_start_time    DateTime
  address                address                  @relation(fields: [address_id], references: [id])
  customer               customer                 @relation(fields: [customer_id], references: [id])
  service_delivery_offer service_delivery_offer[]
}

model service_appointment {
  id                        Int       @id @default(autoincrement())
  service_delivery_offer_id Int
  service_deliver_on        DateTime
  service_start_time        DateTime
  service_end_time          DateTime?

  service_delivery_offer service_delivery_offer @relation(fields: [service_delivery_offer_id], references: [id])
  provider_review_log    provider_review_log? // One-to-one relationship with provider_review_log
}

//PART 5: Admin Area

model admin {
  id       Int     @id @default(autoincrement())
  password String
  email    String
  image    String?
}
